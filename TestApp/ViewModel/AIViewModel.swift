//
//  AIViewModel.swift
//  TestApp
//
//  Created by Daniel Jermaine on 06/09/2025.
//

import Foundation
import FirebaseAI
import MusicKit

struct Song: Identifiable {
    let id = UUID()
    let title: String
    let artist: String
}

@Observable
class AIViewModel {
    var isGenerating = false
    var notes: String = ""
    var responseData: String = ""
    var errorMessage: String? = nil
    var songs: [Song] = []
    var playlistURL: URL? = nil
    var isCreatingPlaylist = false

    private var model: GenerativeModel = {
        let generationConfig = GenerationConfig(
            temperature: 0.9,
            maxOutputTokens: 200
        )
        let ai = FirebaseAI.firebaseAI(backend: .googleAI())
        return ai.generativeModel(
            modelName: "gemini-2.5-flash"
        )
    }()

    func generatePlaylist() async {
        guard !notes.isEmpty else {
            responseData = "Please enter a mood or theme."
            return
        }
        isGenerating = true
        errorMessage = nil
        responseData = "" // Clear old results
        songs = []
        playlistURL = nil
        defer { isGenerating = false }

        let prompt = """
        Create a playlist of 10 songs based on this description: \(notes).
        Return in the format:
        1. Song - Artist
        2. Song - Artist
        """

        do {
            let response = try await model.generateContent(prompt)
            if let text = response.text {
                responseData = text
                parsePlaylist(text)
            } else {
                responseData = "No songs generated."
            }
        } catch {
            errorMessage = error.localizedDescription
            responseData = "‚ùå Error: \(error.localizedDescription)"
        }
    }

    private func parsePlaylist(_ data: String) {
        let lines = data.split(whereSeparator: \.isNewline)
        self.songs = lines.compactMap { line in
            let components = line.components(separatedBy: " - ")
            guard components.count == 2 else { return nil }
            let title = components[0].trimmingCharacters(in: .whitespacesAndNewlines).replacingOccurrences(of: #"^\d+\.\s"#, with: "", options: .regularExpression)
            let artist = components[1].trimmingCharacters(in: .whitespacesAndNewlines)
            return Song(title: title, artist: artist)
        }
    }

    func createAppleMusicPlaylist() async {
        guard !songs.isEmpty else { return }
        isCreatingPlaylist = true
        defer { isCreatingPlaylist = false }

        do {
            var trackIds: [MusicItemID] = []
            for song in songs {
                var request = MusicCatalogSearchRequest(term: "\(song.title) \(song.artist)", types: [MusicKit.Song.self])
                request.limit = 1
                let response = try await request.response()
                if let track = response.songs.first {
                    trackIds.append(track.id)
                }
            }

            let newPlaylist = try await MusicLibrary.shared.createPlaylist(
                name: "AI Playlist: \(notes)",
                description: "Generated by AI based on the mood: \(notes)"
            )

            try await MusicLibrary.shared.add(items: trackIds, to: newPlaylist)

            self.playlistURL = newPlaylist.url
        } catch {
            errorMessage = "Error creating playlist: \(error.localizedDescription)"
        }
    }
}
